title: "Entities extraction from resume sections (NER/SpanCat)."
description: "This project uses spaCy (NER) / (Span Categorizer) to extract resume entities"

vars:
  name: "parser_ner"
  version: "0.1.0"
  lang: "fr"
  prob_type: "spancat"
  config: "default"
  data_version: 1
  val_size: 0.2
  convert_type: "none"


directories: ["assets", 
              "scripts", 
              "config", 
              "corpus/spancat", 
              "corpus/ner", 
              "training", 
              "metrics/spancat", 
              "metrics/ner", 
              ]


workflows:
  all:
    - preprocess
    - show-stats-training
    - convert
    - train
    - evaluate
  

commands:
  - name: preprocess
    help: "Preprocess different sections data and merge it in two training and validation files"
    script:
      - "python scripts/preprocess.py --version=${vars.data_version} --val-size=${vars.val_size}"
    deps:
      - "assets/v${vars.data_version}/raw/contact_ner_data_v${vars.data_version}.csv"
      - "assets/v${vars.data_version}/raw/experiences_ner_data_v${vars.data_version}.csv"
      - "assets/v${vars.data_version}/raw/education_ner_data_v${vars.data_version}.csv"
      - "assets/v${vars.data_version}/raw/skills_ner_data_v${vars.data_version}.csv"
      - "assets/v${vars.data_version}/raw/certification_ner_data_v${vars.data_version}.csv"
      - "assets/v${vars.data_version}/raw/soft_skills_ner_data_v${vars.data_version}.csv"
    outputs:
      - "assets/v${vars.data_version}/preprocessed/train.json"
      - "assets/v${vars.data_version}/preprocessed/val.json"

  - name: show-stats-raw
    help: "Show different stats about raw data"
    script:
      - "python scripts/stats.py --version=${vars.data_version}"
    deps:
      - "assets/v${vars.data_version}/raw/contact_ner_data_v${vars.data_version}.csv"
      - "assets/v${vars.data_version}/raw/experiences_ner_data_v${vars.data_version}.csv"
      - "assets/v${vars.data_version}/raw/education_ner_data_v${vars.data_version}.csv"
      - "assets/v${vars.data_version}/raw/skills_ner_data_v${vars.data_version}.csv"
      - "assets/v${vars.data_version}/raw/certification_ner_data_v${vars.data_version}.csv"
      - "assets/v${vars.data_version}/raw/soft_skills_ner_data_v${vars.data_version}.csv"

  - name: show-stats-training
    help: "Show different stats about training data"
    script:
      - "python scripts/stats.py --version=${vars.data_version} --data-type=training"
    deps:
      - "assets/v${vars.data_version}/preprocessed/train.json"
      - "assets/v${vars.data_version}/preprocessed/val.json"

  - name: convert
    help: "Convert data to spaCy format"
    script:
      - "python scripts/convert.py --prob-type=${vars.prob_type} --convert-type=${vars.convert_type}"
    deps:
      - "assets/v${vars.data_version}/preprocessed/train.json"
      - "assets/v${vars.data_version}/preprocessed/val.json"

  - name: debug
    help: "debug training data"
    script:
      - "python -m spacy debug data ./config/${vars.prob_type}/${vars.config}.cfg"

  - name: train
    help: "Train spaCy pipline"
    script:
      - "python -m spacy train ./config/${vars.prob_type}/${vars.config}.cfg -o ./training/${vars.prob_type}/${vars.config}"
    deps:
      - "corpus/${vars.prob_type}/train.spacy"
      - "corpus/${vars.prob_type}/val.spacy"
      - "./config/${vars.prob_type}/${vars.config}.cfg"
    outputs:
      - "training/${vars.prob_type}/${vars.config}/model-best"
    
  - name: resume-training
    help: "Resume training spaCy ner pipline with the transformer architecture"
    script:
      - "python -m spacy train ./config/${vars.prob_type}/resume-training/${vars.config}.cfg --components.ner.source ./training/${vars.prob_type}/${vars.config}/model-best --components.transformer.source ./training/${vars.prob_type}/${vars.config}/model-best -o ./training/${vars.prob_type}/${vars.config} --gpu-id 0"
    deps:
      - "corpus/${vars.prob_type}/train.spacy"
      - "corpus/${vars.prob_type}/val.spacy"
      - "./config/${vars.prob_type}/${vars.config}.cfg"
    outputs:
      - "training/${vars.prob_type}/${vars.config}/model-best"

  - name: evaluate
    help: "Evaluate the trained model and export metrics"
    script:
      - "python -m spacy evaluate training/${vars.prob_type}/${vars.config}/model-best corpus/${vars.prob_type}/val.spacy --output metrics/${vars.prob_type}/metrics-${vars.config}.json"
    deps:
      - "training/${vars.prob_type}/${vars.config}/model-best"
      - "corpus/${vars.prob_type}/val.spacy"
    outputs:
      - "metrics/${vars.prob_type}/metrics-${vars.config}.json"

  - name: clean-preprocessed
    help: "Delete the preprocessed files"
    script:
      - "rm -rf assets/v${vars.data_version}/preprocessed/*"
  
  - name: clean
    help: "Clean corpus and training data files"
    script:
      - "rm -rf corpus/*"
      - "rm -rf training/*"
  